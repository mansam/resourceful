#!/usr/bin/env python

import os
import sys
from mimetypes import guess_type

DEFAULT_MIMETYPE = 'text/plain;base64'

def process_file(filepath):
	filedata = {}
	with open(filepath, 'r') as f:
		filedata['blob'] = f.read().encode('base64').replace('\n','')
	filedata['path'] = filepath
	filedata['type'] = '%s;base64' % guess_type(filepath)[0]
	if not filedata['type']:
		filedata['type'] = DEFAULT_MIMETYPE
	return filedata

def process_files(path):
	file_datas = []
	for root, subFolders, files in os.walk(path):
		for file in files:
			file_datas.append(process_file(os.path.join(root, file)))
	return file_datas

def make_manifest(path):
	import StringIO
	manifest = []
	data = process_files(path)
	out = StringIO.StringIO()
	for f in data:
		manifest_entry = [f['path'], f['type'], out.tell()]
		out.write(f['blob'])
		manifest_entry.append(out.tell())
		manifest.append(manifest_entry)
	return out, manifest

if __name__ == "__main__":
    import json
    bundle, manifest = make_manifest(sys.argv[1])
    with open('resourceful.js.template', 'r') as resource_template:
    	template = resource_template.read()
    	template = template.replace('{{manifest}}', json.dumps(manifest))
    	template = template.replace('{{bundle}}', bundle.getvalue())
    	bundle.close()
    	with open('resourceful.js','w') as resource:
    		resource.write(template)
    print manifest

